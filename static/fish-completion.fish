#!/usr/bin/env fish

# this file is generated by chore. it can be recreated at any moment depending
# on configuration of your fish shell.

# chore: https://github.com/9seconds/chore

# how to use it:
#   1. save it as ~/.config/fish/completions/chore.fish
#   2. save `chore fish-completion | source` as ~/.config/completions/chore.fish
#      instead.


function __chore_debug
  echo -- $argv[1] ">>" $argv[2..-1] >> __chore_log
end


function __chore_get_commandline -d 'Parses commandline processing global flags'
  set -l cmd (commandline -poc)[2..-1]

  # __chore_cache_commandline contains a full commandline INCLUDING global options
  # __chore_cache_commandline_parsed contains a commandline processed by argparse

  if set -q __chore_cache_commandline; and test "$cmd" = "$__chore_cache_commandline"
    if set -q __chore_cache_commandline_parsed
      for item in $__chore_cache_commandline_parsed
        echo $item
      end
      return 0
    end
  end

  set -g __chore_cache_commandline $cmd

  argparse -s 'h/help' 'd/debug' 'V/version' -- $cmd 2>/dev/null
  or return 1

  if set -q _flag_h
    set -e cmd[(contains --index -- $_flag_h $cmd)]
  end
  if set -q _flag_d
    set -e cmd[(contains --index -- $_flag_d $cmd)]
  end
  if set -q _flag_V
    set -e cmd[(contains --index -- $_flag_V $cmd)]
  end

  set -g __chore_cache_commandline_parsed $cmd

  for item in $cmd
    echo $item
  end

  return 0
end


function __chore_no_subcommands -d 'Checks if not subcommands were provided yet'
  set -l args (__chore_get_commandline)

  test (count $args) -eq 0
  and return 0
  or return 1
end


function __chore_using_subcommand -d 'Check if chore uses given list of commands'
  set -l cmd (__chore_get_commandline)

  contains -- $cmd[1] $argv
  and return 0
  or return 1
end


function __chore_require_namespace -d 'Check if chore script requires namespace'
  set -l cmd (__chore_get_commandline)

  # run
  test (count $cmd) -eq 1
  and return 0
  or return 1
end
function __chore_complete_namespace -d 'Complete chore namespace'
  chore show
end


function __chore_require_script -d 'Check if chore script requires script name'
  set -l cmd (__chore_get_commandline)

  # run ns
  test (count $cmd) -eq 2
  and return 0
  or return 1
end
function __chore_complete_script -d 'Complete chore script'
  # run ns
  set -l args (__chore_get_commandline)

  chore show $args[2] 2>/dev/null
end


function __chore_require_options -d 'Check if chore script wants its own options'
  if __fish_seen_subcommand_from --
    return 1
  end

  set -l cmd (__chore_get_commandline)

  # run ns script
  test (count $cmd) -ge 3
  and return 0
  or return 1
end
function __chore_complete_options -d 'Complete chore script options'
  # run ns script ...
  set -l args (__chore_get_commandline)

  chore fish-completion $args[2..-1]
end


function __chore_options_are_completed -d 'Check if chore command options are done'
  set -l cmd (__chore_get_commandline)

  # run ns script
  test (count $cmd) -ge 3
  and __fish_seen_subcommand_from --
  and return 0
  or return 1
end

# -----------------------------------------------------------------------------


complete -f -c chore -n '__fish_use_subcommand; and __chore_no_subcommands'  -s h -l help    -d 'Show help'
complete -f -c chore -n '__fish_use_subcommand; and __chore_no_subcommands;' -s d -l debug   -d 'Run in debug mode'
complete -f -c chore -n '__fish_use_subcommand; and __chore_no_subcommands'  -s V -l version -d 'Show version'

complete -f -c chore -n '__chore_no_subcommands' -a run         -d 'Run chore script'
complete -f -c chore -n '__chore_no_subcommands' -a edit-script -d 'Edit chore script'
complete -f -c chore -n '__chore_no_subcommands' -a edit-config -d 'Edit chore script config'
complete -f -c chore -n '__chore_no_subcommands' -a show        -d 'Show details on namespaces or scripts'
#
complete -f -c chore \
  -n '__chore_using_subcommand r run e edit-script c edit-config s show; and __chore_require_namespace' \
  -a '(__chore_complete_namespace)'
complete -f -c chore \
  -n '__chore_using_subcommand r run e edit-script c edit-config s show; and __chore_require_script' \
  -a '(__chore_complete_script)'
complete -f -c chore \
  -n '__chore_using_subcommand r run; and __chore_require_options' \
  -a '(__chore_complete_options)'
complete -F -c chore \
  -n '__chore_using_subcommand r run; and __chore_options_are_completed' \
  -a '(__fish_complete_path)'
